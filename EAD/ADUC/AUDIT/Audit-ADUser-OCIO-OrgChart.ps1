FUNCTION Audit-ADUserOrgChart {
<#
            .SYNOPSIS 
            This queries AD and reports Employee, Manager, Direct Reports, Title and Department (as filled out in EAD)

            .DESCRIPTION
            NAME: Audit-ADUserOrgChart
            AUTHOR: Grant Harrington
            EMAIL: grant.harrington@ars.usda.gov
            LASTEDIT: 9/29/2016 11:55 AM
            KEYWORDS: ADUC

            .PARAMETER Name
            $SearchUser = users first or last name (If multiple results appear, rerun with more specifc values)

            .EXAMPLE
            Audit-ADUserOrgChart -SearchUser grant.harrington -SearchBase ARS

            .LINK
            https://ems-mysites.usda.gov/Person.aspx?accountname=ARSNET%5CGrant%2EHarrington

            #>
	
	[CmdletBinding(SupportsPaging = $true,
				   SupportsShouldProcess = $true)]
	[OutputType([array])]
	param
	(
		[Parameter(Mandatory = $TRUE)]
		[string]$SearchUser,
		[Parameter(Mandatory = $TRUE)]
		[ValidateSet('PA3060', 'ARS')]
		[string]$SearchBase
	)
	
	BEGIN {

        $ExportPath = 'C:\Temp'
        $ExportFileName = 'OCIO_OrgChart'
        $CSVExport = "{0}\{1}.csv" -f $ExportPath, $ExportFileName
		switch ($SearchBase) {
			PA3060 {
				$EAD_PA3060 = 'OU=3060,OU=PA,OU=ARS,OU=Agencies,DC=usda,DC=net'
			} #end Local
			ARS {
				$EAD_PA3060 = 'OU=ARS,OU=Agencies,DC=usda,DC=net'
			} #end ARS
		} #end Switch SearchBase

        $ScriptName = 'Audit-ADUserOrgChart'
        $LastEdit = '9/29/2016 11:33 AM'

	} #end BEGIN

	PROCESS {
		$FilterName = "sAMAccountName -like `"*{0}*`"" -f $SearchUser
		
		#This will gather the AD User name		
		$global:GetUser = Get-ADUser -SearchBase $EAD_PA3060 -filter $FilterName -Properties *
		foreach ($GU in $GetUser) {
			
			$ObjAccountReviewResults = [ordered]@{
				"Script Name" = $ScriptName
				"Script Last Edit Date" = $LastEdit
				"Data Collected" = get-date
				"Full Name" = "{0} {1}" -f $GU.GivenName,$GU.Surname
				"Title" = $GU.Title
				"Department (RU)" = $GU.Department
				'Manager (Supervisor)' = ($GU.Manager | ForEach-Object {
					if (($_ -match [regex]"CN=.*\\") -eq $TRUE) {
						$DN_FIRST = $_ -creplace '(^.*\\,\s|\s-.*$)', ''
						$DN_LAST = $_ -creplace '(CN=|\\.*$)', ''
						$Employee = "{0} {1}" -f $DN_FIRST, $DN_LAST;
						$Employee
					} #end if CN=.*\\
					elseif (($_ -match [regex]"(CN=|,OU.*$)") -eq $TRUE) {
						$_ -replace [regex]"(CN=|,OU.*$)", ''
					} #end elseif (CN=|,OU.*$)
				} #end foreach-object
				) -join ','
				'DirectReports (Supervisees)' = ($GU.DirectReports | ForEach-Object {
					if (($_ -match [regex]"CN=.*\\") -eq $TRUE) {
						$DN_FIRST = $_ -creplace '(^.*\\,\s|\s-.*$)', ''
						$DN_LAST = $_ -creplace '(CN=|\\.*$)', ''
						$Employee = "{0} {1}" -f $DN_FIRST, $DN_LAST;
						$Employee
					} #end if CN=.*\\
					elseif (($_ -match [regex]"(CN=|,OU.*$)") -eq $TRUE) {
						$_ -replace [regex]"(CN=|,OU.*$)", ''
					} #end elseif (CN=|,OU.*$)
				} #end foreach-object
				) -join ','
				"Distinguished Name" = $GU.DistinguishedName
				} #end ObjAccountReviewResults
			
			$ObjAccountReview = New-Object -TypeName PSObject -Property $ObjAccountReviewResults
			Write-Output $ObjAccountReview
            $CSVExport
			$ObjAccountReview | export-csv $CSVExport -NoTypeInformation -Append
			$ObjAccountReview | clip.exe
		} #end foreach
	} #end PROCESS
} #end Audit-ADUserOrgChart

#region Regex Explained
#These explanations are generated by Regexbuddy, http://www.regexbuddy.com/index.html
#I include them for better understanding of the process used to modify/extract text results.
<#
CN=.*\\

Options: Case sensitive

Match the character string “CN=” literally (case sensitive) «CN=»
Match any single character that is NOT a line break character (line feed) «.*»
   Between zero and unlimited times, as many times as possible, giving back as needed (greedy) «*»
Match the backslash character «\\»
#>

<#
^.*\\,\s|\s-.*$

Options: Case sensitive

Match this alternative (attempting the next alternative only if this one fails) «^.*\\,\s»
   Assert position at the beginning of the string «^»
   Match any single character that is NOT a line break character (line feed) «.*»
      Between zero and unlimited times, as many times as possible, giving back as needed (greedy) «*»
   Match the backslash character «\\»
   Match the character “,” literally «,»
   Match a single character that is a “whitespace character” (any Unicode separator, tab, line feed, carriage return, vertical tab, form feed, next line) «\s»
Or match this alternative (the entire match attempt fails if this one fails to match) «\s-.*$»
   Match a single character that is a “whitespace character” (any Unicode separator, tab, line feed, carriage return, vertical tab, form feed, next line) «\s»
   Match the character “-” literally «-»
   Match any single character that is NOT a line break character (line feed) «.*»
      Between zero and unlimited times, as many times as possible, giving back as needed (greedy) «*»
   Assert position at the end of the string, or before the line break at the end of the string, if any (line feed) «$»
#>

<#
CN=|\\.*$

Options: Case sensitive

Match this alternative (attempting the next alternative only if this one fails) «CN=»
   Match the character string “CN=” literally (case sensitive) «CN=»
Or match this alternative (the entire match attempt fails if this one fails to match) «\\.*$»
   Match the backslash character «\\»
   Match any single character that is NOT a line break character (line feed) «.*»
      Between zero and unlimited times, as many times as possible, giving back as needed (greedy) «*»
   Assert position at the end of the string, or before the line break at the end of the string, if any (line feed) «$»
#>
#endregion Regex Explained